{"version":3,"sources":["saga/index.ts","const.ts","reducers/index.ts","actions/index.ts","components/BarcodeTFApp.tsx","utils/index.ts","containers/indexTF.ts","index.tsx"],"names":["handleSomething","rootSaga","fork","AppStatus","DisplayConstraints","QVGA","facingMode","width","exact","height","VGA","HD","FULLHD","FourK","ideal","max","EightK","DisplayConstraintOptions","initialState","counter","status","barcode","execScan","select_start_x","select_start_y","select_end_x","select_end_y","inSelect","finSelect","reducer","state","action","gs","Object","assign","console","log","type","payload","Actions","createActions","args","captureVideoImageToCanvas","video","videoCaptureCanvas","document","createElement","videoWidth","videoHeight","getContext","drawImage","BarcodeTFApp2","count","videoResolution","colnum","rownum","showRect","showSS","showGrid","parentRef","React","imageRef1","imageRef2","videoRef","barcodeDisplayCanvasRef","controllerCanvasRef","statusCanvasRef","controllerDivRef","workerSSMaskMonitorCanvasRef","workerAreaCVCanvasRef","parentHeight","parentWidth","overlayWidth","overlayHeight","overlayXOffset","overlayYOffset","multiBarcodReader","MultiBarcodeReader","frame","fps","frameCountStartTime","Date","getTime","changeCameraResolution","resolution","current","srcObject","getTracks","map","s","stop","navigator","mediaDevices","getUserMedia","webCamPromise","audio","then","stream","Promise","resolve","reject","onloadedmetadata","all","res","checkParentSizeChanged","setState","catch","error","requestScanBarcode","a","controller","captureCanvas","remove","window","requestAnimationFrame","this","thisTime","addInitializedListener","props","initialized","addWaitNextFrameListeners","addScanedBarcordListeners","init","getBoundingClientRect","bottom","top","right","left","Math","floor","findOverlayLocation","initWorkerPromise","initWorker","constraintOptions","keys","v","key","text","value","colnumOptions","rownumOptions","style","position","ref","autoPlay","playsInline","muted","Dropdown","options","simple","item","onChange","e","Label","basic","size","color","onClick","newValue","barcodePreviewCanvas","previewCanvas","girdDrawCanvas","BarcodeTFApp","ConnectorTF","connect","dispatch","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.67410a71.chunk.js","sourcesContent":["import { fork } from 'redux-saga/effects';\n\nfunction* handleSomething() {\n}\n\nexport default function* rootSaga() {\n    yield fork(handleSomething)\n    \n}\n\n","\nexport const AppStatus = {\n    INITIALIZING: \"initializing\",\n    INITIALIZED : \"initialized\",\n    RUNNING     : \"running\",\n}\n\nexport const AIConfig = {\n\n    SPLIT_MARGIN: 0.2,\n    SPLIT_WIDTH: 300,\n    SPLIT_HEIGHT: 300,\n    TRANSFORMED_WIDTH: 300,\n    TRANSFORMED_HEIGHT: 300,\n    TRANSFORMED_MAX: 300,\n    CROP_MARGIN: 20,\n\n    SS_MODEL_PATH: '/WEB_MODEL/icnet_0300x0300_0.10/model.json',\n}\n\n\nexport const WorkerCommand = {\n    SET_OVERLAY  :  'set_overlay',\n    SCAN_BARCODE : 'scan_barcode',\n    PREDICT_AREA : 'predict_area',\n    DRAW_MASK    : 'draw_mask',\n    SCAN_BARCODES: 'scan_barcodes',\n}\n\nexport const WorkerResponse = {\n    NOT_PREPARED     : 'not_prepared',\n    INITIALIZED      : 'initialized',\n    SCANED_BARCODE   : 'scaned_barcode',\n    PREDICTED_AREA   : 'predicted_area',\n    DREW_MASK        : 'drew_mask',\n    SCANNED_BARCODES : 'scanned_barcodes',\n}\n\n/////////////////////////////\n////// ディスプレイ設定  ////\n/////////////////////////////\n\n\nexport const qvgaConstraints:MediaTrackConstraintSet = {\n    facingMode: \"environment\",\n    width: { exact: 320 },\n    height: { exact: 240 }\n};\n\nexport const vgaConstraints:MediaTrackConstraintSet = {\n    facingMode: \"environment\",\n    width: { exact: 640 },\n    height: { exact: 480 }\n};\n\nexport const hdConstraints:MediaTrackConstraintSet = {\n    facingMode: \"environment\",\n    width: { exact: 1280 },\n    height: { exact: 720 }\n};\n\nexport const fullHdConstraints:MediaTrackConstraintSet = {\n    facingMode: \"environment\",\n    width: { exact: 1920 },\n    height: { exact: 1080 }\n};\n\nexport const fourKConstraints:MediaTrackConstraintSet = {\n    facingMode: \"environment\",\n    width: { ideal: 2500, max: 4096 },\n    height: { ideal: 1600, max: 4096 }\n};\n\nexport const eightKConstraints:MediaTrackConstraintSet = {\n    facingMode: \"environment\",\n    width: { ideal: 7680 },\n    height: { ideal: 4320 }\n};\n\n\nexport const DisplayConstraints = {\n    QVGA:   qvgaConstraints,\n    VGA:    vgaConstraints,\n    HD:     hdConstraints,\n    FULLHD: fullHdConstraints,\n    FourK:  fourKConstraints,\n    EightK: eightKConstraints,\n} as const\n\nexport const DisplayConstraintOptions:{[key:string]:MediaTrackConstraintSet} = {\n    \"VGA\"    : DisplayConstraints.VGA,\n    \"HD\"     : DisplayConstraints.HD,\n    \"FULLHD\" : DisplayConstraints.FULLHD\n}\n\nexport const DisplayConstraint   = DisplayConstraints.FULLHD\n//export const DisplayConstraint = DisplayConstraints.HD\n//export const DisplayConstraint = DisplayConstraints.VGA\n","import { AppStatus } from \"../const\"\n\n\nexport interface GlobalState {\n    counter: number\n    status: string\n    barcode: string\n    execScan: boolean\n\n    select_start_x: number\n    select_start_y: number\n    select_end_x: number\n    select_end_y: number\n    inSelect : boolean\n    finSelect:boolean\n}\n\nexport const initialState = {\n    counter: 0,\n    status: AppStatus.INITIALIZING,\n    barcode: \"\",    \n    execScan: false,\n\n\n    select_start_x: 0,\n    select_start_y: 0,\n    select_end_x: 0,\n    select_end_y: 0,\n    inSelect : false,\n    finSelect: false,\n\n}\n\nconst reducer = (state: GlobalState=initialState, action:any) => {\n    var gs: GlobalState = Object.assign({},state)\n    gs.counter++\n    gs.execScan = false\n    console.log(action)    \n    switch (action.type) {\n        case 'INITIALIZED':\n            gs.status   = AppStatus.INITIALIZED\n            gs.execScan =  true\n            break\n\n        case 'SCANNED':\n            gs.status   = AppStatus.RUNNING\n            gs.execScan = true\n            gs.barcode  = action.payload\n            break\n\n        case 'START_SELECT':\n            gs.select_start_x = action.payload[0]\n            gs.select_start_y = action.payload[1]\n            break\n\n        case 'MOVE_SELECT':\n            gs.select_end_x = action.payload[0]\n            gs.select_end_y = action.payload[1]\n            gs.inSelect = true\n            break\n\n        case 'END_SELECT':\n            gs.select_end_x = action.payload[0]\n            gs.select_end_y = action.payload[1]\n            gs.inSelect     = false\n            gs.finSelect    = true\n            break\n                            \n    }\n    return gs\n}\n\nexport default reducer;\n","import { createActions } from 'redux-actions';\n\nexport const Actions = createActions(\n    {\n        'INITIALIZED' : (args) => (args),\n        'SCANNED'     : (args) => (args),\n        'START_SELECT'     : (...args) => (args),\n        'MOVE_SELECT'      : (...args) => (args),\n        'END_SELECT'       : (...args) => (args),\n    },\n)\n\n","import * as React from 'react';\nimport { GlobalState } from '../reducers';\nimport { AppStatus, DisplayConstraintOptions } from '../const';\nimport { findOverlayLocation, } from '../utils'\nimport { Dropdown, Label } from 'semantic-ui-react'\nimport { MultiBarcodeReader } from 'multi-barcode-scanner-js'\ninterface BarcodeTFAppState{\n    count: number,\n    videoResolution:string,\n    colnum:number,\n    rownum:number,\n    showRect:boolean,\n    showSS:boolean,\n    showGrid:boolean,\n}\n\nconst captureVideoImageToCanvas = (video:HTMLVideoElement):HTMLCanvasElement => {\n    const videoCaptureCanvas    = document.createElement(\"canvas\");\n    videoCaptureCanvas.width = video.videoWidth\n    videoCaptureCanvas.height = video.videoHeight\n\n    const tmpCtx                = videoCaptureCanvas.getContext('2d')!\n    tmpCtx.drawImage(video, 0, 0, videoCaptureCanvas.width, videoCaptureCanvas.height);\n    return videoCaptureCanvas\n}\n\nclass BarcodeTFApp2 extends React.Component {\n    state: BarcodeTFAppState = {\n        count: 0,\n        videoResolution: \"VGA\",\n        colnum: 1,\n        rownum: 1,\n        showRect: true,\n        showSS: false,\n        showGrid: false,\n    }\n\n\n    ////////////////////\n    // HTML Component //\n    ////////////////////\n    parentRef = React.createRef<HTMLDivElement>()\n    imageRef1 = React.createRef<HTMLImageElement>()\n    imageRef2 = React.createRef<HTMLImageElement>()\n    videoRef  = React.createRef<HTMLVideoElement>()\n    barcodeDisplayCanvasRef = React.createRef<HTMLCanvasElement>()\n    controllerCanvasRef = React.createRef<HTMLCanvasElement>()\n    statusCanvasRef     = React.createRef<HTMLCanvasElement>()\n    controllerDivRef = React.createRef<HTMLDivElement>()\n    workerSSMaskMonitorCanvasRef = React.createRef<HTMLCanvasElement>()\n    workerAreaCVCanvasRef        = React.createRef<HTMLCanvasElement>()\n    ////////////////////\n    // Component Size //\n    ////////////////////\n    videoHeight = 0\n    videoWidth = 0\n    parentHeight = 0\n    parentWidth = 0\n\n    overlayWidth = 0\n    overlayHeight = 0\n    overlayXOffset = 0\n    overlayYOffset = 0\n\n\n\n    multiBarcodReader = new MultiBarcodeReader()\n\n\n    /**\n       * FPS測定用\n       */\n    frame = 0\n    fps   = 0.0\n    frameCountStartTime = new Date().getTime()\n    gameLoop() {\n        this.frame++\n        const thisTime = new Date().getTime()\n        if (thisTime - this.frameCountStartTime > 1000) {\n            const fps = (this.frame / (thisTime - this.frameCountStartTime)) * 1000\n            this.frameCountStartTime = new Date().getTime()\n            this.frame = 0\n            this.fps = fps\n        }\n    }\n\n    /**\n     * ワーカーの初期化\n     */\n    async initWorker() {\n        this.multiBarcodReader.addInitializedListener(()=>{\n            const props = this.props as any\n            props.initialized()\n            this.requestScanBarcode()\n        })\n        this.multiBarcodReader.addWaitNextFrameListeners(()=>{this.requestScanBarcode()})\n        this.multiBarcodReader.addScanedBarcordListeners(()=>{\n            console.log(\"SCANNED!!!\")\n        })\n//        this.multiBarcodReader.barcodePreviewCanvas = this.workerAreaCVCanvasRef.current!\n        this.multiBarcodReader.init()\n        return\n    }\n\n    /**\n     * HTMLコンポーネントに位置計算\n     */\n    private checkParentSizeChanged(video: HTMLVideoElement) {\n        // サイズ算出\n        this.videoHeight = video.videoHeight\n        this.videoWidth  = video.videoWidth\n\n        let parentHeight = video.getBoundingClientRect().bottom - video.getBoundingClientRect().top\n        const parentWidth  = video.getBoundingClientRect().right - video.getBoundingClientRect().left\n        // console.log(\"--- checkParentSizeChanged ---\")\n        // console.log(video.getBoundingClientRect().left, video.getBoundingClientRect().top, video.getBoundingClientRect().right, video.getBoundingClientRect().bottom)\n        // console.log(parentWidth, parentHeight)\n\n        \n        // if(parentHeight === 0){\n            parentHeight = (parentWidth/this.videoWidth) * this.videoHeight\n        // }\n\n        this.parentHeight = parentHeight\n        this.parentWidth = parentWidth\n        // const { overlayWidth, overlayHeight, overlayXOffset, overlayYOffset } = findOverlayLocation(this.parentRef.current!, this.videoWidth, this.videoHeight)\n        const { overlayWidth, overlayHeight, overlayXOffset, overlayYOffset } = findOverlayLocation(this.parentWidth, this.parentHeight, this.videoWidth, this.videoHeight)\n        this.overlayWidth = overlayWidth\n        this.overlayHeight = overlayHeight\n        this.overlayXOffset = overlayXOffset\n        this.overlayYOffset = overlayYOffset\n\n\n        this.workerAreaCVCanvasRef.current!.width  = this.overlayWidth\n        this.workerAreaCVCanvasRef.current!.height = this.overlayHeight\n        this.workerSSMaskMonitorCanvasRef.current!.width  = this.overlayWidth\n        this.workerSSMaskMonitorCanvasRef.current!.height = this.overlayHeight\n        this.controllerCanvasRef.current!.width  = this.overlayWidth\n        this.controllerCanvasRef.current!.height = this.overlayHeight\n\n\n        // const status = this.statusCanvasRef.current!\n        // const ctx = status.getContext(\"2d\")!\n        // ctx.clearRect(0,0,status.width, status.height)\n        // ctx.fillText(`${this.videoWidth}, ${this.videoHeight}, `,100,30)\n        // ctx.fillText(`${video.width}, ${video.height}, `,100,45)\n        // ctx.fillText(`${parentWidth}, ${parentHeight}, `,100,60)\n        // ctx.fillText(`${this.overlayXOffset}, ${this.overlayYOffset}, `,100,90)\n        // ctx.fillText(`${this.overlayWidth}, ${this.overlayHeight}, `,100,120)\n\n        // console.log(`>>>>1   ${this.videoWidth}, ${this.videoHeight}, `)\n        // console.log(`>>>>2   ${video.width}, ${video.height}, `)\n        // console.log(`>>>>3   ${parentWidth}, ${parentHeight}, `)\n        // console.log(`>>>>4   ${this.overlayXOffset}, ${this.overlayYOffset}, `)\n        // console.log(`>>>>5   ${this.overlayWidth}, ${this.overlayHeight}, `)\n        \n        // console.log(`>>>> 6  ${video.getBoundingClientRect().bottom} - ${video.getBoundingClientRect().top}`)\n        // console.log(`>>>> 6  ${video.getBoundingClientRect().right} - ${video.getBoundingClientRect().left}`)\n\n    }\n\n    /**\n     * マウント時の処理\n     * モデルのロード、カメラの準備ができたらイベント発行する\n     */\n    componentDidMount() {\n        console.log('Initializing')\n        // console.log('>>>>>>>>>>>>>>>>>>>>>>SUM:',sum(1,2))\n        // const t = new TestTest()\n        // t.init()\n\n        // const t = new TestWebWorker()\n        // t.init()\n\n        const initWorkerPromise = this.initWorker()\n\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            const webCamPromise = navigator.mediaDevices\n                .getUserMedia({\n                    audio: false,\n                    video: DisplayConstraintOptions[this.state.videoResolution]\n                })\n                .then(stream => {\n                    console.log(this.videoRef)\n                    this.videoRef.current!.srcObject = stream;\n                    return new Promise((resolve, reject) => {\n                        this.videoRef.current!.onloadedmetadata = () => {\n                            resolve();\n                        };\n                    });\n                });\n            \n            Promise.all([initWorkerPromise, webCamPromise])\n                .then((res) => {\n                    console.log('Camera and model ready!')\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }           \n    }\n\n    changeCameraResolution = (resolution:string) =>{\n        (this.videoRef.current!.srcObject as MediaStream ).getTracks().map(s=>s.stop())\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            const webCamPromise = navigator.mediaDevices\n                .getUserMedia({\n                    audio: false,\n                    video: DisplayConstraintOptions[resolution]\n                })\n                .then(stream => {\n                    console.log(this.videoRef)\n                    this.videoRef.current!.srcObject = stream;\n                    return new Promise((resolve, reject) => {\n                        this.videoRef.current!.onloadedmetadata = () => {\n                            resolve();\n                        };\n                    });\n                });\n            \n            Promise.all([webCamPromise])\n                .then((res) => {\n                    console.log('Camera and model ready!')\n                    const video = this.videoRef.current!\n                    this.checkParentSizeChanged(video)\n                    this.setState({videoResolution:resolution})\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }           \n\n    }\n\n\n    requestScanBarcode = async () => {\n        console.log('requestScanBarcode')\n        const video = this.videoRef.current!\n        const controller = this.controllerCanvasRef.current!\n        controller.width = this.overlayWidth\n        controller.height = this.overlayHeight\n\n        const captureCanvas = captureVideoImageToCanvas(video)\n        if(captureCanvas.width === 0){\n            captureCanvas.remove()\n            window.requestAnimationFrame(this.requestScanBarcode);\n            return\n        }\n\n        this.multiBarcodReader.requestScanBarcode(captureCanvas, this.state.colnum, this.state.rownum)\n        captureCanvas.remove()\n\n    }\n\n\n    render() {\n        const gs = this.props as GlobalState\n        const video = this.videoRef.current!\n\n        if(gs.status === AppStatus.INITIALIZED){\n            console.log('initialized')\n            this.checkParentSizeChanged(video)\n        }\n\n        const constraints = Object.keys(DisplayConstraintOptions)\n        const constraintOptions = constraints.map(v =>{\n            return {key:v, text:v, value:v}\n        })\n\n        const colnumOptionList = [1,2,3]\n        const colnumOptions = colnumOptionList.map(v =>{\n            return {key:v, text:v, value:v}\n        })\n        const rownumOptionList = [1,2,3]\n        const rownumOptions = rownumOptionList.map(v =>{\n            return {key:v, text:v, value:v}\n        })\n\n        return (\n            <div style={{ width: \"100%\", height: this.parentHeight, position: \"relative\", top: 0, left: 0, }} ref={this.parentRef} >\n                {/* <img src=\"imgs/barcode01.png\" alt=\"barcode\" ref={this.imageRef1} />\n                <img src=\"imgs/barcode02.png\" alt=\"barcode\" ref={this.imageRef2} /> */}\n                <video\n                    autoPlay\n                    playsInline\n                    muted\n                    ref={this.videoRef}\n                    //style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.overlayWidth, height:this.overlayHeight}}\n                    \n                    style={{ width: \"100%\", height: \"100%\", position: \"absolute\", top: 0, left: 0, }}\n                />\n                <canvas\n                    ref = {this.workerSSMaskMonitorCanvasRef}\n                    style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.parentWidth, height:this.parentHeight}}\n                />\n                <canvas\n                    ref = {this.workerAreaCVCanvasRef}\n                    style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.parentWidth, height:this.parentHeight}}\n                />\n                <canvas\n                    ref={this.barcodeDisplayCanvasRef}\n                    style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.parentWidth, height:this.parentHeight}}\n                />\n\n                <canvas\n                    ref={this.controllerCanvasRef}\n                    style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.parentWidth, height:this.parentHeight}}\n                />\n\n                <canvas\n                    ref={this.statusCanvasRef}\n                    style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.parentWidth, height:this.parentHeight}}\n                />\n\n\n                <div \n                    ref={this.controllerDivRef}\n                    style={{ position: \"absolute\", top: this.overlayYOffset, left: this.overlayXOffset, width:this.parentWidth, height:this.parentHeight}}\n                >\n                    <Dropdown text='Resolution' options={constraintOptions } simple item onChange={(e, { value }) => {\n                        this.changeCameraResolution(value as string)\n                    }}/>\n                    <Dropdown text='col' options={colnumOptions} simple item  onChange={(e, { value }) => {\n                        this.setState({colnum:value as number})\n                    }}/>\n                    <Dropdown text='row' options={rownumOptions} simple item onChange={(e, { value }) => {\n                        this.setState({rownum:value as number})\n                    }}/>\n                    <Label basic size=\"tiny\" color={this.state.showRect?\"red\":\"grey\"} onClick={()=>{\n                        const newValue = !this.state.showRect\n                        // this.workerAreaCVCanvasRef.current!.width  = this.overlayWidth\n                        // this.workerAreaCVCanvasRef.current!.height = this.overlayHeight\n                        this.multiBarcodReader.barcodePreviewCanvas = newValue ? this.workerAreaCVCanvasRef.current! : null\n                        this.setState({showRect:newValue})\n                    }}>rect</Label>\n                    <Label basic size=\"tiny\" color={this.state.showSS?\"red\":\"grey\"} onClick={()=>{\n                        const newValue = !this.state.showSS\n                        // this.workerSSMaskMonitorCanvasRef.current!.width  = this.overlayWidth\n                        // this.workerSSMaskMonitorCanvasRef.current!.height = this.overlayHeight\n                        this.multiBarcodReader.previewCanvas = newValue ? this.workerSSMaskMonitorCanvasRef.current! : null\n                        this.setState({showSS:newValue})\n                    }}>ss</Label>\n                    <Label basic size=\"tiny\" color={this.state.showGrid?\"red\":\"grey\"} onClick={()=>{\n                        const newValue = !this.state.showGrid\n                        // this.controllerCanvasRef.current!.width  = this.overlayWidth\n                        // this.controllerCanvasRef.current!.height = this.overlayHeight\n                        this.multiBarcodReader.girdDrawCanvas = newValue ? this.controllerCanvasRef.current! : null\n                        this.setState({showGrid:!this.state.showGrid})\n                    }}>grid</Label>\n\n                </div>\n            </div>\n\n        )\n    }\n\n}\n\n\n\nclass BarcodeTFApp extends React.Component {\n    render() {\n        const props = this.props as any\n        return(\n            <div>\n                {/* <Label>\n                    A\n                </Label>\n                <br />\n                <Label>\n                    b\n                </Label> */}\n                <BarcodeTFApp2 {...props}/>\n            </div>\n        )\n    }\n}\n\nexport default BarcodeTFApp;","\nexport const with_time = (name:string, func:any, out:boolean) =>{\n    const start = performance.now();\n    func();\n    const end = performance.now();\n    \n    const elapsed = (end - start);\n    const elapsedStr = elapsed.toFixed(3);\n    if(out){\n        console.log(`[WITH TIME] ${name}: ${elapsedStr} ms`);\n    }\n}\n\nexport const with_time_async = async(name:string, func:any, out:boolean) =>{\n    const start = performance.now();\n    await func();\n    const end = performance.now();\n    \n    const elapsed = (end - start);\n    const elapsedStr = elapsed.toFixed(3);\n    if(out){\n        console.log(`[WITH TIME] ${name}: ${elapsedStr} ms`);\n    }\n}\n\n\n\n\ninterface OverlayLocation {\n    overlayWidth: number\n    overlayHeight: number\n    overlayXOffset: number\n    overlayYOffset: number\n}\n\nexport function findOverlayLocation(parentWidth:number, parentHeight:number, videoWidth: number, videoHeight: number): OverlayLocation {\n    const parentAspect = parentWidth / parentHeight\n    const videoAspect = videoWidth / videoHeight\n\n    let overlayHeight = 0\n    let overlayWidth = 0\n    let overlayXOffset = 0\n    let overlayYOffset = 0\n\n    if (parentAspect > videoAspect) {\n        //キャンバスのほうが横長　➔　キャンバスの縦で律速\n        // \n        overlayHeight = parentHeight\n        overlayYOffset = 0\n        overlayWidth = overlayHeight * (videoWidth / videoHeight)\n        overlayXOffset = (parentWidth - overlayWidth) / 2\n    } else {\n        //キャンバスのほうが縦長　➔　キャンバスの横で律速\n        overlayWidth = parentWidth\n        overlayXOffset = 0\n        overlayHeight = overlayWidth * (videoHeight / videoWidth)\n        overlayYOffset = (parentHeight - overlayHeight) / 2\n    }\n    overlayWidth   = Math.floor(overlayWidth)\n    overlayHeight  = Math.floor(overlayHeight)\n    overlayXOffset = Math.floor(overlayXOffset)\n    overlayYOffset = Math.floor(overlayYOffset)\n    //console.log('------------', overlayWidth, overlayHeight, overlayXOffset, overlayYOffset)\n    return {  overlayWidth, overlayHeight, overlayXOffset, overlayYOffset }\n\n}\n","import { Dispatch } from 'redux';\nimport { connect } from 'react-redux'\n\nimport { Actions } from '../actions'\nimport { GlobalState } from '../reducers';\nimport BarcodeTFApp from '../components/BarcodeTFApp';\n\nexport interface Props {\n}\n\nfunction mapStateToProps(state:GlobalState) {\n  return state\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    initialized:      (args:string) => {dispatch(Actions.initialized(args))},\n  }\n}\n\nconst ConnectorTF = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BarcodeTFApp);\n\nexport default ConnectorTF;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './saga';\nimport reducer from './reducers';\nimport ConnectorTF from './containers/indexTF'\n\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,\n  applyMiddleware(\n    sagaMiddleware\n  )\n);\nsagaMiddleware.run(rootSaga);\n\n\nReactDOM.render(\n    <Provider store={store}>\n      {(()=>{\n        return <ConnectorTF/>\n      })()}\n\n    </Provider>\n    ,document.getElementById('root'));\n\n"],"sourceRoot":""}